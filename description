Что это?
Это помощь в пятой лабораторной работе по программированию. Проект разбит на этапы ибо человек не приспособлен
выполнять большие и сложные задачи, зато он хорошо справляется с маленькими и простыми. Каждый этап эта папка вида
task_n n - номер задачи, в каждой папке начиная с первой есть файл task - это файл с описанием того, что нужно сделать
в рамках данной задачи, также есть файл hint - это файл с подсказками относительно того, как сделать задание, в нем нет
готового варианта, но есть некоторые прояснения сложных моментов и объяснение некоторой логики. И есть папка solution
она эквивалент папки java, которая лежит в idea по пути src\main\java и в которой обычно находится код проекта, то есть
если в какой-то задаче класс лежит по пути task_n\solution\commands\class, то в твоем проекте этот класс будет находится
по пути src\main\java\commands\class. Так вот там можно посмотреть решение очередной задачи, оно естественно не
единственное и ты можешь придумать локально свое (локально, имеется в виду, чтобы оно не меняло общую архитектуру
приложения, то есть если ты придумаешь свою реализацию функцию, не меняя её сигнатуру, это ок)
Сейчас в src лежит пример готовой лабы, о том как его запустить и поссмотреть как работает ты найдешь позже в заданиях
если что все задания будут сделаны для варианты номер 69, но варианты не сильно различаются, так что все решения
достаточно наглядные, внизу этого описания я вставил текст задания варианта 69.

Почему стоит это делать?
Если ты не сдашь хотя бы одну лабораторную, то гарантированно попадешь на комиссию, если не сдашь хотя бы две, то с
большой вероятностью попадешь на комиссию. Когда я делал эти лабы, я только 1,5 недели плотных раздумий потратил на
продумывание архитектуры и в итоге все равно придумал не лучшее решение и для шестой лабораторной пришлось переделывать,
что в условиях ограниченного времени и сложности лаб очень критично. Это уже не говоря о том, сколько времени пришлось
потратить на фикс своих багов и багов, появляющихся в результате малой изученности джавы мной.
В основе этой лабораторной лежит паттерн команда, а как говорят разработчики-сеньоры, нужно много раз по подсказке
применить определенные паттерны, чтобы научиться их видеть самому, а лучше в первый раз посмотреть на примере, а то и
не на одном, как применяется тот или иной шаблон.
Для этой лабы очень важно написать код как можно более чистый, расширяемый и без костылей, потому что на его основе
будут держаться еще три лабы. Интересный факт в карьерной лестнице дизайнерами-архитекторами становятся после того, как
стали сеньорами. Тем более если ты не собираешься связывать свою жизнь с джавой, то не сиди над этими лабами долго,
познай их настолько, чтобы хватило для сдачи и иди дальше, как показывает жизненный опыт и разного рода источники
стремится быть хорошим во всем не делает тебя хорошим ни в чем. Если хочешь чего-то добиться, выдели для себя основные
направления и развивай их.

Некоторые советы
Архитектура зтого проекта составлена с учетом всех моих знаний и с консультациями chatGPT (на самом деле именно в
архитектуру он особо не лез, а помогал в осоновном с реализаций разных задуманных мною штук).
Все опытные разработчики на просторах интернета говорят, что хороший программист, это тот, который умеет работать как ни
странно в команде, это означает, что если ты сидишь над задачей больше получаса и у тебя не получается её решить, значит
ты не то что можешь, ты должен попросить помощь, кстати chatGPT непллох в этой стезе (оказание помощи). Главное, чтобы
ты понимал, что chatGPT делает, а то, что он делает это за тебя - экономия времени. Один сеньор из Беларуси говорит, что
хороший программист, должен понимать, когда ему придумывать своё решение, а когда искать готовое, есть многие вещи,
которые уже написаны хорошо и ты, сделав сам, не сделаешь лучше.
Также лучше не засиживаться в изучении одной темы надолго, здесь наоборот, постоянно углубляясь в познании  чего-то
одного, ты в итоге не узнаешь ничего, сейчас слишком много технологий, чтобы досконально знать все.
Программирование - это дисциплина практики, если ты можешь написать то, что тебе нужно, значит ты знаешь достаточно.
(Кроме Java core (коллекции всякие например) его желательно знать получше).

А сейчас открывай task_-1  и вперед к новым свершениям!

Телефон поддержки, где вам могут ответить на интересующие вас вопросы - 8 917 402-82-63 (после 20 числа, там не смогут
отвечать сразу, но смогут перезванивать)



P.S. Текст задания
Реализовать консольное приложение, которое реализует управление коллекцией объектов в интерактивном режиме. В коллекции необходимо хранить объекты класса Organization, описание которого приведено ниже.

Разработанная программа должна удовлетворять следующим требованиям:

Класс, коллекцией экземпляров которого управляет программа, должен реализовывать сортировку по умолчанию.
Все требования к полям класса (указанные в виде комментариев) должны быть выполнены.
Для хранения необходимо использовать коллекцию типа java.util.Vector
При запуске приложения коллекция должна автоматически заполняться значениями из файла.
Имя файла должно передаваться программе с помощью: аргумент командной строки.
Данные должны храниться в файле в формате csv
Чтение данных из файла необходимо реализовать с помощью класса java.util.Scanner
Запись данных в файл необходимо реализовать с помощью класса java.io.PrintWriter
Все классы в программе должны быть задокументированы в формате javadoc.
Программа должна корректно работать с неправильными данными (ошибки пользовательского ввода, отсутсвие прав доступа к файлу и т.п.).
В интерактивном режиме программа должна поддерживать выполнение следующих команд:

help : вывести справку по доступным командам
info : вывести в стандартный поток вывода информацию о коллекции (тип, дата инициализации, количество элементов и т.д.)
show : вывести в стандартный поток вывода все элементы коллекции в строковом представлении
add {element} : добавить новый элемент в коллекцию
update id {element} : обновить значение элемента коллекции, id которого равен заданному
remove_by_id id : удалить элемент из коллекции по его id
clear : очистить коллекцию
save : сохранить коллекцию в файл
execute_script file_name : считать и исполнить скрипт из указанного файла. В скрипте содержатся команды в таком же виде, в котором их вводит пользователь в интерактивном режиме.
exit : завершить программу (без сохранения в файл)
remove_first : удалить первый элемент из коллекции
shuffle : перемешать элементы коллекции в случайном порядке
history : вывести последние 13 команд (без их аргументов)
remove_any_by_annual_turnover annualTurnover : удалить из коллекции один элемент, значение поля annualTurnover которого эквивалентно заданному
average_of_annual_turnover : вывести среднее значение поля annualTurnover для всех элементов коллекции
print_unique_official_address : вывести уникальные значения поля officialAddress всех элементов в коллекции
Формат ввода команд:

Все аргументы команды, являющиеся стандартными типами данных (примитивные типы, классы-оболочки, String, классы для хранения дат), должны вводиться в той же строке, что и имя команды.
Все составные типы данных (объекты классов, хранящиеся в коллекции) должны вводиться по одному полю в строку.
При вводе составных типов данных пользователю должно показываться приглашение к вводу, содержащее имя поля (например, "Введите дату рождения:")
Если поле является enum'ом, то вводится имя одной из его констант (при этом список констант должен быть предварительно выведен).
При некорректном пользовательском вводе (введена строка, не являющаяся именем константы в enum'е; введена строка вместо числа; введённое число не входит в указанные границы и т.п.) должно быть показано сообщение об ошибке и предложено повторить ввод поля.
Для ввода значений null использовать пустую строку.
Поля с комментарием "Значение этого поля должно генерироваться автоматически" не должны вводиться пользователем вручную при добавлении.
Описание хранимых в коллекции классов:

public class Organization {
    private Integer id; //Поле не может быть null, Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически
    private String name; //Поле не может быть null, Строка не может быть пустой
    private Coordinates coordinates; //Поле не может быть null
    private java.util.Date creationDate; //Поле не может быть null, Значение этого поля должно генерироваться автоматически
    private Double annualTurnover; //Поле может быть null, Значение поля должно быть больше 0
    private OrganizationType type; //Поле не может быть null
    private Address officialAddress; //Поле может быть null
}
public class Coordinates {
    private long x; //Значение поля должно быть больше -775
    private long y; //Значение поля должно быть больше -734
}
public class Address {
    private String street; //Поле не может быть null
    private Location town; //Поле может быть null
}
public class Location {
    private Integer x; //Поле не может быть null
    private int y;
    private int z;
    private String name; //Поле не может быть null
}
public enum OrganizationType {
    COMMERCIAL,
    PUBLIC,
    TRUST,
    OPEN_JOINT_STOCK_COMPANY;
}